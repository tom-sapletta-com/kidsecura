package com.parentalcontrol.mvp.service

import android.app.*
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.PixelFormat
import android.hardware.display.DisplayManager
import android.hardware.display.VirtualDisplay
import android.media.ImageReader
import android.media.projection.MediaProjection
import android.media.projection.MediaProjectionManager
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.speech.tts.TextToSpeech
import android.util.DisplayMetrics
import android.util.Log
import android.view.WindowManager
import androidx.core.app.NotificationCompat
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.text.TextRecognition
import com.google.mlkit.vision.text.TextRecognizer
import com.google.mlkit.vision.text.latin.TextRecognizerOptions
import com.parentalcontrol.mvp.MainActivity
import com.parentalcontrol.mvp.R
import com.parentalcontrol.mvp.utils.FileLogger
import kotlinx.coroutines.*
import java.io.File
import java.nio.ByteBuffer
import java.util.*

class ScreenReaderService : Service(), TextToSpeech.OnInitListener {
    
    companion object {
        const val ACTION_UPDATE_INTERVAL = "com.parentalcontrol.mvp.UPDATE_INTERVAL"
        const val NOTIFICATION_ID = 1002
        const val CHANNEL_ID = "ScreenReaderChannel"
        private const val TAG = "ScreenReaderService"
        
        @Volatile
        var isRunning = false
            private set
    }
    
    private lateinit var mediaProjectionManager: MediaProjectionManager
    private var mediaProjection: MediaProjection? = null
    private var virtualDisplay: VirtualDisplay? = null
    private var imageReader: ImageReader? = null
    
    private lateinit var tts: TextToSpeech
    private var ttsInitialized = false
    
    private lateinit var textRecognizer: TextRecognizer
    
    private val serviceScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private var captureJob: Job? = null
    
    private var screenWidth = 0
    private var screenHeight = 0
    private var screenDensity = 0
    
    private var resultCode = 0
    private var resultData: Intent? = null
    private var readInterval = 10 // 10 sekund - nowy domy≈õlny interwa≈Ç
    private var speechRate = 3.0f // 3x szybciej - nowa domy≈õlna prƒôdko≈õƒá
    private var language = "pl_PL"
    private var topCrop = 10 // % g√≥rnej czƒô≈õci do pominiƒôcia
    private var bottomCrop = 10 // % dolnej czƒô≈õci do pominiƒôcia
    
    // Do logowania i wy≈õwietlania
    private var currentReadingText = ""
    private lateinit var fileLogger: FileLogger
    
    private val lastReadText = mutableSetOf<String>()
    private val handler = Handler(Looper.getMainLooper())
    
    // Auto-stop timer
    private var autoStopJob: Job? = null
    
    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üîä ScreenReaderService onCreate")
        
        // Inicjalizacja MediaProjectionManager
        mediaProjectionManager = getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager
        
        // Inicjalizacja Text-to-Speech
        tts = TextToSpeech(this, this)
        
        // Inicjalizacja ML Kit Text Recognition
        val options = TextRecognizerOptions.Builder().build()
        textRecognizer = TextRecognition.getClient(options)
        
        // Inicjalizacja FileLogger
        fileLogger = FileLogger(this)
        
        // Pobierz parametry ekranu
        val windowManager = getSystemService(Context.WINDOW_SERVICE) as WindowManager
        val metrics = DisplayMetrics()
        windowManager.defaultDisplay.getMetrics(metrics)
        screenWidth = metrics.widthPixels
        screenHeight = metrics.heightPixels
        screenDensity = metrics.densityDpi
        
        isRunning = true
    }
    
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "üîä ScreenReaderService onStartCommand: action=${intent?.action}")
        
        when (intent?.action) {
            ACTION_UPDATE_INTERVAL -> {
                readInterval = intent.getIntExtra("READ_INTERVAL", 2)
                Log.d(TAG, "Updated read interval to $readInterval seconds")
                restartCapture()
                return START_STICKY
            }
            else -> {
                if (intent != null) {
                    resultCode = intent.getIntExtra("RESULT_CODE", 0)
                    resultData = intent.getParcelableExtra("DATA")
                    readInterval = intent.getIntExtra("READ_INTERVAL", 10)
                    speechRate = intent.getFloatExtra("SPEECH_RATE", 3.0f)
                    language = intent.getStringExtra("LANGUAGE") ?: "pl_PL"
                    topCrop = intent.getIntExtra("TOP_CROP", 10)
                    bottomCrop = intent.getIntExtra("BOTTOM_CROP", 10)
                    
                    if (ttsInitialized) {
                        tts.setSpeechRate(speechRate)
                        setTtsLanguage(language)
                    }
                    
                    startForeground(NOTIFICATION_ID, createNotification())
                    startScreenCapture()
                    
                    // Auto-stop po 30 sekundach
                    startAutoStopTimer()
                }
            }
        }
        
        return START_STICKY
    }
    
    private fun startAutoStopTimer() {
        autoStopJob?.cancel()
        autoStopJob = serviceScope.launch {
            delay(30_000) // 30 sekund
            Log.d(TAG, "üõë Auto-stopping ScreenReader after 30 seconds")
            stopSelf()
        }
    }
    
    private fun createNotification(): Notification {
        // Utw√≥rz kana≈Ç notyfikacji dla Android O+
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Czytnik Ekranu",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "Powiadomienie o dzia≈ÇajƒÖcym czytniku ekranu"
                setShowBadge(false)
            }
            
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.createNotificationChannel(channel)
        }
        
        // Utw√≥rz intent dla powrotu do MainActivity
        val pendingIntent = PendingIntent.getActivity(
            this,
            0,
            Intent(this, MainActivity::class.java),
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        // Intent do zatrzymania serwisu
        val stopIntent = Intent(this, ScreenReaderService::class.java).apply {
            action = "STOP_SERVICE"
        }
        val stopPendingIntent = PendingIntent.getService(
            this,
            1,
            stopIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        // Zbuduj notyfikacjƒô z aktualnie czytanym tekstem
        val notificationText = if (currentReadingText.isNotEmpty()) {
            "Czyta: ${currentReadingText.take(50)}${if (currentReadingText.length > 50) "..." else ""}"
        } else {
            "Czytanie co ${readInterval}s, pomija g√≥rne i dolne 10% (auto-stop za 30s)"
        }
        
        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("üîä Screen Reader 3x Speed")
            .setContentText(notificationText)
            .setSmallIcon(android.R.drawable.ic_menu_view)
            .setContentIntent(pendingIntent)
            .addAction(android.R.drawable.ic_menu_close_clear_cancel, "üõë Stop", stopPendingIntent)
            .setOngoing(true)
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .build()
    }
    
    private fun startScreenCapture() {
        Log.d(TAG, "üé¨ Starting screen capture for TTS")
        
        try {
            if (resultData == null) {
                Log.e(TAG, "‚ùå No result data for MediaProjection")
                stopSelf()
                return
            }
            
            mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, resultData!!)
            
            if (mediaProjection == null) {
                Log.e(TAG, "‚ùå MediaProjection is null")
                stopSelf()
                return
            }
            
            // Utw√≥rz ImageReader do przechwytywania obraz√≥w
            imageReader = ImageReader.newInstance(
                screenWidth,
                screenHeight,
                PixelFormat.RGBA_8888,
                2
            )
            
            // Utw√≥rz VirtualDisplay
            virtualDisplay = mediaProjection?.createVirtualDisplay(
                "ScreenReaderDisplay",
                screenWidth,
                screenHeight,
                screenDensity,
                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,
                imageReader?.surface,
                null,
                handler
            )
            
            // Rozpocznij okresowe przechwytywanie
            startPeriodicCapture()
            
            Log.d(TAG, "‚úÖ Screen capture for TTS started successfully")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error starting screen capture for TTS", e)
            stopSelf()
        }
    }
    
    private fun startPeriodicCapture() {
        captureJob?.cancel()
        captureJob = serviceScope.launch {
            while (isActive) {
                captureAndReadScreen()
                delay(readInterval * 1000L)
            }
        }
    }
    
    private fun restartCapture() {
        startPeriodicCapture()
    }
    
    private suspend fun captureAndReadScreen(): Unit = withContext(Dispatchers.IO) {
        try {
            val sessionId = System.currentTimeMillis()
            Log.d(TAG, "üì∏ Capturing screen for TTS (session: $sessionId)...")
            
            // Loguj rozpoczƒôcie sesji
            fileLogger.logServiceEvent("üé¨ Capture Start: Session $sessionId - interval ${readInterval}s")
            
            val image = imageReader?.acquireLatestImage()
            image?.let { img ->
                try {
                    Log.d(TAG, "üñºÔ∏è Processing image ${img.width}x${img.height}")
                    
                    // Konwertuj Image na Bitmap
                    val bitmap = imageToBitmap(img)
                    img.close()
                    
                    // Loguj szczeg√≥≈Çy przetwarzania
                    fileLogger.logServiceEvent("üîÑ Image Processing: ${bitmap.width}x${bitmap.height} -> cropped (top:${topCrop}%, bottom:${bottomCrop}%)")
                    
                    // Wykonaj OCR
                    Log.d(TAG, "üîç Starting OCR on cropped image ${bitmap.width}x${bitmap.height}")
                    performOCR(bitmap)
                    
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error processing image for TTS", e)
                    fileLogger.logServiceEvent("‚ùå Image Processing Error: ${e.message}")
                    img.close()
                }
            }
            
            // Loguj zako≈Ñczenie sesji
            fileLogger.logServiceEvent("‚úÖ Capture Complete: Session $sessionId finished")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error capturing screen for TTS", e)
            fileLogger.logServiceEvent("‚ùå Capture Error: ${e.message}")
        }
    }
    
    private fun imageToBitmap(image: android.media.Image): Bitmap {
        val planes = image.planes
        val buffer: ByteBuffer = planes[0].buffer
        val pixelStride = planes[0].pixelStride
        val rowStride = planes[0].rowStride
        val rowPadding = rowStride - pixelStride * image.width
        
        val fullBitmap = Bitmap.createBitmap(
            image.width + rowPadding / pixelStride,
            image.height,
            Bitmap.Config.ARGB_8888
        )
        fullBitmap.copyPixelsFromBuffer(buffer)
        
        // Przytnij do w≈Ça≈õciwego rozmiaru
        val correctBitmap = if (rowPadding == 0) {
            fullBitmap
        } else {
            Bitmap.createBitmap(fullBitmap, 0, 0, image.width, image.height)
        }
        
        // Przytnij do obszaru zgodnie z ustawieniami
        val topCropPixels = (correctBitmap.height * topCrop / 100.0).toInt()  // G√≥rne X%
        val bottomCropPixels = (correctBitmap.height * (100 - bottomCrop) / 100.0).toInt()  // Do (100-Y)%
        val croppedHeight = bottomCropPixels - topCropPixels
        
        Log.d(TAG, "üñºÔ∏è Cropping bitmap: original ${correctBitmap.width}x${correctBitmap.height} -> ${correctBitmap.width}x${croppedHeight} (skip top ${topCrop}%, bottom ${bottomCrop}%)")
        
        val croppedBitmap = Bitmap.createBitmap(
            correctBitmap, 
            0,                    // x - ca≈Ça szeroko≈õƒá
            topCropPixels,        // y - od X% wysoko≈õci
            correctBitmap.width,  // width - ca≈Ça szeroko≈õƒá
            croppedHeight         // height - obszar miƒôdzy cropami
        )
        
        // Zapisz miniaturkƒô do logowania
        saveScreenshotThumbnail(croppedBitmap)
        
        // Zwolnij pamiƒôƒá niepotrzebnych bitmap
        if (fullBitmap != correctBitmap) {
            fullBitmap.recycle()
        }
        if (correctBitmap != croppedBitmap) {
            correctBitmap.recycle()
        }
        
        return croppedBitmap
    }
    
    /**
     * Zapisuje miniaturkƒô ekranu do cel√≥w debugowania
     */
    private fun saveScreenshotThumbnail(bitmap: Bitmap) {
        try {
            val timestamp = System.currentTimeMillis()
            val fileName = "screen_reader_${timestamp}.jpg"
            
            val downloadsDir = File("/storage/emulated/0/Download/KidSecura/ScreenReader")
            if (!downloadsDir.exists()) {
                downloadsDir.mkdirs()
            }
            
            val file = File(downloadsDir, fileName)
            
            // Stw√≥rz mniejszƒÖ miniaturkƒô (max 400px szeroko≈õci)
            val maxWidth = 400
            val scale = if (bitmap.width > maxWidth) {
                maxWidth.toFloat() / bitmap.width.toFloat()
            } else {
                1.0f
            }
            
            val thumbnailWidth = (bitmap.width * scale).toInt()
            val thumbnailHeight = (bitmap.height * scale).toInt()
            val thumbnail = Bitmap.createScaledBitmap(bitmap, thumbnailWidth, thumbnailHeight, true)
            
            file.outputStream().use { out ->
                thumbnail.compress(Bitmap.CompressFormat.JPEG, 80, out)
                out.flush()
            }
            
            Log.d(TAG, "üì∑ Thumbnail saved: $fileName (${thumbnailWidth}x${thumbnailHeight})")
            
            if (thumbnail != bitmap) {
                thumbnail.recycle()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error saving thumbnail", e)
        }
    }
    
    private suspend fun performOCR(bitmap: Bitmap) {
        withContext(Dispatchers.IO) {
            try {
                val inputImage = InputImage.fromBitmap(bitmap, 0)
                
                textRecognizer.process(inputImage)
                    .addOnSuccessListener { visionText ->
                        processRecognizedText(visionText.text)
                    }
                    .addOnFailureListener { e ->
                        Log.e(TAG, "‚ùå OCR failed for TTS", e)
                    }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error performing OCR for TTS", e)
            }
        }
    }
    
    private fun processRecognizedText(text: String) {
        val timestamp = System.currentTimeMillis()
        
        // Loguj rozpoczƒôcie przetwarzania
        serviceScope.launch {
            fileLogger.logServiceEvent("üîç OCR Start: Processing ${text.length} characters")
        }
        
        if (text.isBlank()) {
            Log.d(TAG, "üîä No text detected on screen")
            serviceScope.launch {
                fileLogger.logServiceEvent("‚ö†Ô∏è OCR Result: No text detected")
            }
            return
        }
        
        Log.d(TAG, "üìù Raw OCR text (${text.length} chars): ${text.take(100)}...")
        
        // Loguj do FileLogger pe≈Çny surowy tekst
        serviceScope.launch {
            fileLogger.logServiceEvent("üìù RAW OCR TEXT (${text.length} chars): '$text'")
        }
        
        // Podziel tekst na linie i oczy≈õƒá - ale zachowaj wiƒôcej tekstu
        val allLines = text.split("\n").map { it.trim() }
        val nonEmptyLines = allLines.filter { it.isNotEmpty() && it.length > 1 }
        
        // BARDZIEJ PERMISYWNE FILTROWANIE - akceptuj wiƒôcej typ√≥w tekstu
        val filteredLines = nonEmptyLines.filter { line -> 
            // Akceptuj linie z jakimikolwiek literami, cyframi lub podstawowymi znakami
            line.matches(Regex(".*[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª0-9].*")) ||
            line.length >= 3 // Lub jakƒÖkolwiek liniƒô z co najmniej 3 znakami
        }
        
        // Loguj odrzucone linie ≈ºeby zobaczyƒá co tracimy
        val rejectedLines = nonEmptyLines.filter { line ->
            !line.matches(Regex(".*[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª0-9].*")) && line.length < 3
        }
        
        if (rejectedLines.isNotEmpty()) {
            Log.d(TAG, "‚ùå Rejected ${rejectedLines.size} lines: ${rejectedLines.take(3)}")
            serviceScope.launch {
                fileLogger.logServiceEvent("‚ùå REJECTED LINES (${rejectedLines.size}): ${rejectedLines.joinToString(" | ")}")
            }
        }
        
        Log.d(TAG, "‚úÇÔ∏è Text processing: ${allLines.size} total lines -> ${nonEmptyLines.size} non-empty -> ${filteredLines.size} filtered")
        Log.d(TAG, "‚úÇÔ∏è Filtered lines: ${filteredLines.take(5)}")
        
        // Loguj szczeg√≥≈Çy filtrowania
        serviceScope.launch {
            fileLogger.logServiceEvent("‚úÇÔ∏è TEXT FILTERING: ${allLines.size} total -> ${nonEmptyLines.size} non-empty -> ${filteredLines.size} valid lines")
            fileLogger.logServiceEvent("‚úÇÔ∏è FILTERED LINES: ${filteredLines.joinToString(" | ")}")
        }
        
        val lines = filteredLines
        
        // NOWA LOGIKA: Czytaj WSZYSTKIE dostƒôpne linie, nie tylko "nowe"
        // Znajd≈∫ nowy tekst (ale je≈õli nie ma nowego, czytaj wszystko)
        val newLines = lines.filter { line ->
            !lastReadText.contains(line)
        }
        
        // Je≈õli nie ma nowych linii, u≈ºyj wszystkich dostƒôpnych linii
        val linesToProcess = if (newLines.isEmpty()) {
            Log.d(TAG, "‚ö†Ô∏è No new lines found, using ALL ${lines.size} lines")
            serviceScope.launch {
                fileLogger.logServiceEvent("‚ö†Ô∏è NO NEW LINES: Using ALL ${lines.size} lines instead")
            }
            lines
        } else {
            Log.d(TAG, "‚úÖ Found ${newLines.size} new lines out of ${lines.size} total")
            serviceScope.launch {
                fileLogger.logServiceEvent("‚úÖ NEW LINES FOUND: ${newLines.size} new out of ${lines.size} total")
            }
            newLines
        }
        
        if (linesToProcess.isNotEmpty()) {
            // Zaktualizuj zbi√≥r przeczytanego tekstu (tylko je≈õli by≈Çy nowe linie)
            if (newLines.isNotEmpty()) {
                lastReadText.clear()
                lastReadText.addAll(lines.takeLast(15)) // Zwiƒôkszy≈Çem z 10 na 15
            }
            
            // PRZECZYTAJ WIƒòCEJ TEKSTU - ZWIƒòKSZAMY DO 500 znak√≥w!
            var textToRead = ""
            var charCount = 0
            val targetLength = 500  // ZWIƒòKSZONE z 250 na 500!
            
            // Loguj szczeg√≥≈Çy budowania tekstu
            Log.d(TAG, "üîß Building text from ${linesToProcess.size} lines (${newLines.size} new), target: $targetLength chars")
            serviceScope.launch {
                fileLogger.logServiceEvent("üîß TEXT BUILDING: ${linesToProcess.size} lines available (${newLines.size} new), target: $targetLength chars")
            }
            
            for ((index, line) in linesToProcess.withIndex()) {
                val lineWithSeparator = if (textToRead.isEmpty()) line else ". $line"
                val wouldBeLength = charCount + lineWithSeparator.length
                
                Log.d(TAG, "üîß Line $index: '$line' (${line.length} chars) -> total would be $wouldBeLength")
                
                if (wouldBeLength <= targetLength) {
                    textToRead += lineWithSeparator
                    charCount += lineWithSeparator.length
                    Log.d(TAG, "‚úÖ Added line $index, total now: $charCount chars")
                } else {
                    Log.d(TAG, "‚ùå Skipping line $index - would exceed $targetLength limit ($wouldBeLength chars)")
                    // NOWA LOGIKA: Je≈õli mamy jeszcze miejsce, dodaj skr√≥conƒÖ wersjƒô
                    val remainingSpace = targetLength - charCount
                    if (remainingSpace > 20) { // Je≈õli zosta≈Ço co najmniej 20 znak√≥w
                        val truncatedLine = line.take(remainingSpace - 3) + "..."
                        textToRead += if (textToRead.isEmpty()) truncatedLine else ". $truncatedLine"
                        Log.d(TAG, "üìù Added truncated line: '${truncatedLine}'")
                    }
                    break
                }
            }
            
            // Loguj finalne wyniki
            serviceScope.launch {
                fileLogger.logServiceEvent("üîß FINAL TEXT BUILD: ${textToRead.length} chars from ${linesToProcess.size} available lines (target was $targetLength)")
            }
            
            if (textToRead.length > 5) { // Zmniejszy≈Çem pr√≥g z 10 na 5
                currentReadingText = textToRead
                
                // Loguj szczeg√≥≈Çy czytania
                serviceScope.launch {
                    fileLogger.logServiceEvent("üîä TTS Reading: ${textToRead.length} chars - \"${textToRead.take(50)}...\"")
                }
                
                // Zaktualizuj notyfikacjƒô z aktualnie czytanym tekstem
                updateNotification()
                
                // Czytaj bezpo≈õrednio bez prefiksu
                speakTextDirect(textToRead)
                Log.d(TAG, "üîä Reading ${textToRead.length} chars: $textToRead")
                
                // Zapisz te≈º do FileLogger ≈ºeby by≈Ço widoczne w PodglƒÖdzie Log√≥w
                serviceScope.launch {
                    fileLogger.logServiceEvent("üîä READING: ${textToRead.length} chars - '$textToRead'")
                }
            }
        } else {
            Log.d(TAG, "üîä No new text to read")
            serviceScope.launch {
                fileLogger.logServiceEvent("üîÑ OCR Result: No new text (${lines.size} lines already read)")
            }
        }
    }
    
    private fun speakText(text: String) {
        if (ttsInitialized && text.isNotBlank()) {
            // Zatrzymaj poprzednie czytanie
            tts.stop()
            
            // Skr√≥ƒá tekst je≈õli za d≈Çugi (u≈ºywa starych ustawie≈Ñ dla kompatybilno≈õci)
            val textToSpeak = if (text.length > 150) {
                text.take(150) + "... i dalej"
            } else {
                text
            }
            
            // Rozpocznij nowe czytanie
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                tts.speak(textToSpeak, TextToSpeech.QUEUE_FLUSH, null, "utterance_${System.currentTimeMillis()}")
            } else {
                @Suppress("DEPRECATION")
                tts.speak(textToSpeak, TextToSpeech.QUEUE_FLUSH, null)
            }
            
            Log.d(TAG, "üîä TTS speaking: ${textToSpeak.take(50)}...")
        }
    }
    
    /**
     * Aktualizuje notyfikacjƒô z aktualnie czytanym tekstem
     */
    private fun updateNotification() {
        try {
            val updatedNotification = createNotification()
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.notify(NOTIFICATION_ID, updatedNotification)
            Log.d(TAG, "üì± Notification updated with reading text")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error updating notification", e)
        }
    }
    
    /**
     * Czyta tekst bezpo≈õrednio z konfigurowalnymi ustawieniami skracania
     */
    private fun speakTextDirect(text: String) {
        if (ttsInitialized && text.isNotBlank()) {
            // Loguj rozpoczƒôcie TTS
            serviceScope.launch {
                fileLogger.logServiceEvent("üé§ TTS Start: Speaking ${text.length} chars at ${speechRate}x speed")
            }
            
            // Zatrzymaj poprzednie czytanie
            tts.stop()
            
            // Pobierz ustawienia skracania z preferencji (domy≈õlne: skracaj do 250 znak√≥w)
            val maxLength = 250 // Sta≈Ça warto≈õƒá jak prosi≈Ç user
            val shouldTruncate = true // Domy≈õlnie skracaj
            
            // Skr√≥ƒá tekst je≈õli w≈ÇƒÖczone skracanie i tekst jest za d≈Çugi
            val textToSpeak = if (shouldTruncate && text.length > maxLength) {
                text.take(maxLength) + "..."
            } else {
                text
            }
            
            // Rozpocznij nowe czytanie
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                tts.speak(textToSpeak, TextToSpeech.QUEUE_FLUSH, null, "utterance_${System.currentTimeMillis()}")
            } else {
                @Suppress("DEPRECATION")
                tts.speak(textToSpeak, TextToSpeech.QUEUE_FLUSH, null)
            }
            
            Log.d(TAG, "üîä TTS speaking directly (${textToSpeak.length} chars): ${textToSpeak.take(50)}...")
            
            // Loguj szczeg√≥≈Çy TTS do FileLogger
            serviceScope.launch {
                fileLogger.logServiceEvent("üé§ TTS SPEAKING: '${textToSpeak}' (${textToSpeak.length} chars at ${speechRate}x)")
            }
            
            // Loguj zako≈Ñczenie TTS (przybli≈ºony czas)
            serviceScope.launch {
                val estimatedDurationMs = (textToSpeak.length * 50 / speechRate).toLong() // Szacowana d≈Çugo≈õƒá
                delay(estimatedDurationMs)
                fileLogger.logServiceEvent("‚úÖ TTS Complete: Finished speaking '${textToSpeak.take(30)}...'")
            }
        }
    }
    
    private fun setTtsLanguage(languageTag: String) {
        try {
            val parts = languageTag.split("_")
            val locale = if (parts.size >= 2) {
                Locale(parts[0], parts[1])
            } else {
                Locale(languageTag)
            }
            
            val result = tts.setLanguage(locale)
            if (result == TextToSpeech.LANG_MISSING_DATA || 
                result == TextToSpeech.LANG_NOT_SUPPORTED) {
                Log.w(TAG, "‚ö†Ô∏è Language $languageTag not supported, using Polish")
                tts.setLanguage(Locale("pl", "PL"))
            } else {
                Log.d(TAG, "‚úÖ TTS language set to $languageTag")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error setting TTS language", e)
            tts.setLanguage(Locale("pl", "PL"))
        }
    }
    
    // TextToSpeech.OnInitListener
    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            ttsInitialized = true
            tts.setSpeechRate(speechRate)
            setTtsLanguage(language)
            
            // Powiedz ≈ºe us≈Çuga siƒô uruchomi≈Ça
            speakText("Screen Reader aktywny. Szybko≈õƒá 3x, co $readInterval sekund.")
            
            Log.d(TAG, "‚úÖ TTS initialized successfully (3x speed, 10s interval, crop top+bottom 10%)")
        } else {
            Log.e(TAG, "‚ùå TTS initialization failed")
        }
    }
    
    private fun cleanup() {
        Log.d(TAG, "üßπ Cleaning up ScreenReader resources")
        
        // Zatrzymaj auto-stop timer
        autoStopJob?.cancel()
        
        // Zatrzymaj przechwytywanie
        captureJob?.cancel()
        
        // Zatrzymaj TTS
        if (ttsInitialized) {
            tts.stop()
            tts.shutdown()
        }
        
        // Zwolnij zasoby MediaProjection
        virtualDisplay?.release()
        virtualDisplay = null
        
        imageReader?.close()
        imageReader = null
        
        mediaProjection?.stop()
        mediaProjection = null
        
        // Zwolnij text recognizer
        textRecognizer.close()
        
        // Wyczy≈õƒá zapamiƒôtany tekst
        lastReadText.clear()
    }
    
    override fun onDestroy() {
        Log.d(TAG, "üõë ScreenReaderService onDestroy")
        isRunning = false
        
        // Powiedz ≈ºe siƒô ko≈Ñczy
        if (ttsInitialized) {
            speakText("Czytnik ekranu zatrzymany")
        }
        
        cleanup()
        serviceScope.cancel()
        super.onDestroy()
    }
    
    override fun onBind(intent: Intent?): IBinder? = null
}
